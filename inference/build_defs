# -*- mode: python; -*-
# Copyright 2012 Google Inc. All Rights Reserved.


"""
Defines a minimalistic pyx_extension()

Uses Cython to compile a .pyx file to a .c file, and then uses py_extension()
to compile the .c file to a python extension.

Example:
pyx_extension(name = 'pyxextension',
              srcs = ['myext.pyx'], # can only have 1
              outs = ['myext.so']   # can only have 1
)

You can also use a pyx_library, which is simply a py_library where any
.pyx files are compiled with pyx_extension and added as dependencies.

"""

def split_ext(path):
    ix = path.rfind('.')
    if ix == -1:
        return path, ''
    else:
        return path[:ix], path[ix:]

__author__ = "vsekhar@google.com (Vivek Sekhar)"

CYTHON_EXTENSIONS = ('.pyx', '.pxd', '.pxi', '.py')
C_EXTENSIONS = ('.c', '.cc', '.h')

def pyx_extension(name, srcs, outs=None, deps=None, data=None,
                  copts=None, visibility = None):
    """ Generate a py_extension from a single .pyx source.

    Args:
      name: The name of the build rule
      srcs: The .pyx file to compile (must be a list with only one element)
      deps: The library's dependencies
      copts: Options to be passed to the C compiler
      visibility: The library's visibility
    """
    c_srcs = []
    pyx_src = None
    for src in srcs:
        base, ext = split_ext(src)
        if ext == '.pyx':
            if pyx_src is None:
                pyx_src = src
                if outs is None:
                    outs = [ base + ".so" ]
            else:
                raise BadRule(None, '"srcs" can only have 1 pyx file')
        else:
            c_srcs.append(src)

    if pyx_src is None: raise BadRule(None, '"srcs" must have 1 pyx file')
    if len(outs) != 1: raise BadRule(None, '"outs" can only have 1 element')

    c_deps = [ "//third_party/python_runtime:headers" ]
    pyx_deps = []
    if deps is not None:
        for dep in deps:
            base, ext = split_ext(dep)
            if ext in CYTHON_EXTENSIONS:
                pyx_deps.append(dep)
            else:
                c_deps.append(dep)

    rule_suffix = '_cython_rule'
    intermediate_suffix = '_cython_generated.cc'

    genrule(
        name = pyx_src + rule_suffix,
        srcs = [pyx_src],
        outs = [pyx_src + intermediate_suffix],
        tools = [ "//third_party/py/cython:cython" ] + pyx_deps,
        cmd = '$(location //third_party/py/cython:cython) $(SRCS) --cplus -o $(OUTS)',
        visibility = ['//visibility:private']
    )

    if copts is None:
        copts = []

    py_extension(
        name = name,
        srcs = [pyx_src + intermediate_suffix] + c_srcs,
        deps = c_deps,
        copts = copts + ['-Wno-self-assign'],
        data = data,
        outs = outs,
        visibility = visibility
    )

def pyx_library(name, srcs, data=None, deps=None, deprecation=None,
                distribs=None, licenses=None, obsolete=None, tags=None,
                copts = None, testonly=None, visibility=None):

    py_srcs = []
    py_deps = []
    pyx_deps = []
    if deps is not None:
        py_deps.extend(deps)
        pyx_deps.extend(deps)

    for src in srcs:
        base, ext = split_ext(src)
        if ext in CYTHON_EXTENSIONS or ext in C_EXTENSIONS:
            if ext == '.py':
                py_srcs.append(src)
        else:
            py_srcs.append(src)

    rule_suffix = '_py_extension_rule'

    for src in srcs:
        base, ext = split_ext(src)
        if ext == '.pyx':
            pyx_rule = src.replace('/', '__') + rule_suffix
            pyx_extension(name = pyx_rule,
                          srcs = [src],
                          deps = pyx_deps,
                          data = data,
                          copts = copts,
                          visibility = ['//visibility:private'])
            py_deps.append(pyx_rule)

    py_library(name = name,
               srcs = py_srcs,
               data = data,
               deps = py_deps,
               deprecation = deprecation,
               distribs = distribs,
               licenses = licenses,
               obsolete = obsolete,
               tags = tags,
               testonly = testonly,
               visibility = visibility)